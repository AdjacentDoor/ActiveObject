apply plugin: 'cpp'

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

model {
    toolChains {
    	gcc(Gcc){
	}		
    }
}

libraries{
    activeobject{
        binaries.all{
            targetBuildTypes 'debug'
            cppCompiler.args '-Wall', '-Werror', '-g', '-std=c++11'
        }
    }
}

executables{
    test{
        baseName 'test'
        binaries.all { binary ->
            targetBuildTypes 'debug'
            lib libraries.activeobject.static
            cppCompiler.args '-Wall', '-Werror', '-std=c++11', '-I', '$projectDir/src/main/include'
            linker.args '-pthread'
        }
    }
    test2{
        baseName 'test2'
        binaries.all { binary ->
            targetBuildTypes 'debug'
            lib libraries.activeobject.static
            cppCompiler.args '-Wall', '-Werror', '-std=c++11', '-I', '$projectDir/src/main/include'
            linker.args '-pthread'
        }
    }
    testException{
        baseName 'testException'
        binaries.all { binary ->
            targetBuildTypes 'debug'
            lib libraries.activeobject.static
            cppCompiler.args '-Wall', '-Werror', '-std=c++11', '-I', '$projectDir/src/main/include'
            linker.args '-pthread'
        }
    }
    testAsyncIO{
        baseName 'testAsyncIO'
        binaries.all { binary ->
            targetBuildTypes 'debug'
            lib libraries.activeobject.static
            cppCompiler.args '-Wall', '-Werror', '-std=c++11', '-I', '$projectDir/src/main/include'
            linker.args '-pthread'
        }
    }
}

sources {
    activeobject {
        cpp {
            source {
                srcDirs "src/main/cc"
                include "**/*.cc"
            }
            exportedHeaders {
                srcDirs "src/main/include"
            }
        }
    }
    test{
        cpp{
            source{
                srcDirs 'src/test/cc'
                include "**/testAO.cc"
            }
        }
    }
    test2{
        cpp{
            source{
                srcDirs 'src/test/cc'
                include "**/testAO2.cc"
            }
        }
    }
    testException{
        cpp{
            source{
                srcDirs 'src/test/cc'
                include "**/testAOException.cc"
            }
        }
    }
    testAsyncIO{
        cpp{
            source{
                srcDirs 'src/test/cc'
                include "**/testAsyncIO.cc"
            }
        }
    }
}

task test {
    description "Builds and runs all tests for current platform."

    def testExecutables = binaries.withType(ExecutableBinary)

    dependsOn testExecutables

    doLast {
        testExecutables.all { test ->
            def tempDir = new File(temporaryDir, test.executableFile.name)
            tempDir.mkdirs()
            exec {
                logger.quiet ""
                logger.quiet ">>> Testing `${relativePath test.executableFile}`"
                logger.quiet ">>> in dir `${tempDir}`"
                logger.quiet ""
                workingDir tempDir
                commandLine test.executableFile
            }
        }
    }
}


